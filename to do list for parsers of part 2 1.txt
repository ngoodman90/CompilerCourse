* ⟨Sexpr⟩::=⟨Boolean⟩ | ⟨Char⟩ | ⟨Number⟩ | ⟨String⟩
				| ⟨Symbol⟩ | ⟨ProperList⟩ | ⟨ImproperList⟩
				| ⟨Vector⟩ | ⟨Quoted⟩ | ⟨QuasiQuoted⟩
				| ⟨Unquoted⟩ | ⟨UnquoteAndSpliced⟩
				| ⟨InfixExtension⟩
* ⟨Boolean⟩::=#f | #t
* ⟨Char⟩::=⟨CharPrefix⟩ ( ⟨VisibleSimpleChar⟩ | ⟨NamedChar⟩ | ⟨HexUnicodeChar⟩ )
* ⟨CharPrefix⟩::=#\
* ⟨VisibleSimpleChar⟩::=c, where c is a character that is greater than the space character in the ASCII table
* ⟨NamedChar⟩::=lambda, newline, nul, page, return, space, tab
* ⟨HexUnicodeChar⟩::=x ⟨HexChar⟩ +
* ⟨HexChar⟩::=0| · · · | 9| a| · · · | f
* ⟨Number⟩::=⟨Integer⟩ | ⟨Fraction⟩
* ⟨Integer⟩::=(+|-) ? ⟨Natural⟩
* ⟨Natural⟩::=(0| · · · |9) +
* ⟨Fraction⟩::=⟨Integer⟩ / ⟨Natural⟩
* ⟨String⟩::=" ⟨StringChar⟩ ∗ "
* ⟨StringChar⟩::=⟨StringLiteralChar⟩ | ⟨StringMetaChar⟩ | ⟨StringHexChar⟩
* ⟨StringLiteralChar⟩::=c, where c is any character other than the backslash character (\)
* ⟨StringMetaChar⟩::=\\| \"| \t| \f| \n| \r
* ⟨StringHexChar⟩::=\x ⟨HexChar⟩ ∗ ;
* ⟨Symbol⟩::=⟨SymbolChar⟩ +
* ⟨SymbolChar⟩::=(0 | · · · | 9) | (a | · · · | z) | (A | · · · | Z) | ! | $
				| ^ | * | - | _ | = | + | < | > | ? | /
* ⟨ProperList⟩::=( ⟨Sexpr⟩ ∗ )
* ⟨ImproperList⟩::=( ⟨Sexpr⟩ + . ⟨Sexpr⟩ )
* ⟨Vector⟩::=#( ⟨Sexpr⟩ ∗ )
* ⟨Quoted⟩::=' ⟨Sexpr⟩
* ⟨QuasiQuoted⟩::=` ⟨Sexpr⟩
* ⟨Unquoted⟩::=, ⟨Sexpr⟩
* ⟨UnquoteAndSpliced⟩::=,@ ⟨Sexpr⟩
* ⟨InfixExtension⟩::=⟨InfixPrefixExtensionPrefix⟩⟨InfixExpression⟩
* ⟨InfixPrefixExtensionPrefix⟩::=## | #%
⟨InfixExpression⟩::=⟨InfixAdd⟩ | ⟨InfixNeg⟩ | ⟨InfixSub⟩
				| ⟨InfixMul⟩ | ⟨InfixDiv⟩ | ⟨InfixPow⟩
				| ⟨InfixArrayGet⟩ | ⟨InfixFuncall⟩
				| ⟨InfixParen⟩ | ⟨InfixSexprEscape⟩
				| ⟨InfixSymbol⟩ | ⟨Number⟩
⟨InfixSymbol⟩::=⟨Symbol⟩ other than +, -, *, **, ^, /.
⟨InfixAdd⟩::=⟨InfixExpression⟩ + ⟨InfixExpression⟩
⟨InfixNeg⟩::=- ⟨InfixExpression⟩
⟨InfixSub⟩::=⟨InfixExpression⟩ - ⟨InfixExpression⟩
⟨InfixMul⟩::=⟨InfixExpression⟩ * ⟨InfixExpression⟩
⟨InfixDiv⟩::=⟨InfixExpression⟩ / ⟨InfixExpression⟩
⟨InfixPow⟩::=⟨InfixExpression⟩ ⟨PowerSymbol⟩ ⟨InfixExpression⟩
* ⟨PowerSymbol⟩::=^ | **
* ⟨InfixArrayGet⟩::=⟨InfixExpression⟩ [ ⟨InfixExpression⟩ ]
* ⟨InfixFuncall⟩::=⟨InfixExpression⟩ ( ⟨InfixArgList⟩ )
* ⟨InfixArgList⟩::=⟨InfixExpression⟩ (, ⟨InfixExpression⟩) ∗ | ε
* ⟨InfixParen⟩::=( ⟨InfixExpression⟩ )
* ⟨InfixSexprEscape⟩::=⟨InfixPrefixExtensionPrefix⟩ ⟨Sexpr⟩